{"version":3,"sources":["App.tsx","GridField.tsx","contents/Unspecified.png","contents/GreenRupee.png","contents/BlueRupee.png","contents/RedRupee.png","contents/SilverRupee.png","contents/GoldRupee.png","contents/Rupoor.png","contents/Bomb.png","reportWebVitals.ts","index.tsx"],"names":["TestComp","props","state","nativeModule","currentMessage","solver","cellStates","bombPercentage","rupoorPercentage","selectedType","HoleContent","Unspecified","ranking","boardHeight","boardWidth","possibleLoops","matchingSeedCount","selectedChanged","bind","then","native","setState","create_solver","setImmediate","console","log","cache_boards","get_height","get_width","newStates","Array","fill","map","updateBoardAndRecalculateProbs","this","free","Error","index","selection","getSolverOrError","set_hole","calculate_probabilities_with_pregenerated","forEach","cellState","get_probability","get_rupoor_probability","cellStatesWithIndex","filter","cs","CellState","sort","a","b","get_possible_rng_values_count","getPossibleLoopArray","loop_array","Uint8Array","get_possible_loops","our_arr","val","idx","push","reset_possible_loops","set_possible_loop","i","className","type","checked","onChange","e","setPossibleLoop","target","onClick","resetPossibleLoopArray","_","y","x","bombProbability","rupoorProbability","selectedState","selectionChangedCallback","resetBoard","href","React","Component","App","holeStates","GreenRupee","BlueRupee","RedRupee","SilverRupee","GoldRupee","Rupoor","Bomb","goodnessInterpolation","interpolate","GridField","contentImages","unspecified","greenRupee","blueRupee","redRupee","silverRupee","goldRupee","rupoor","bomb","newSelection","bgColor","isFinite","style","backgroundColor","borderColor","toFixed","h","src","alt","hc","onSelectChange","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.493be1e4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { SolverWrapper } from \"./native/build\";\nimport { GridField, HoleContent } from \"./GridField\";\n\ntype CellState = {\n  bombPercentage: number,\n  rupoorPercentage: number,\n  selectedType: HoleContent,\n  ranking: number,\n};\n\ntype AppState = {\n  nativeModule: any,\n  currentMessage: string,\n  solver: SolverWrapper | null,\n  cellStates: CellState[],\n  boardWidth: number,\n  boardHeight: number,\n  possibleLoops: boolean[],\n  matchingSeedCount: number,\n};\n\nclass TestComp extends React.Component<{}, AppState> {\n  constructor(props: AppState) {\n    super(props);\n\n    this.state = {\n      nativeModule: null,\n      currentMessage: \"waiting to initialize...\",\n      solver: null,\n      cellStates: [{bombPercentage: 0, rupoorPercentage: 0, selectedType: HoleContent.Unspecified, ranking: 100}],\n      boardHeight: 0,\n      boardWidth: 0,\n      possibleLoops: [],\n      matchingSeedCount: -1,\n    };\n\n    this.selectedChanged = this.selectedChanged.bind(this);\n  }\n\n  componentDidMount() {\n    import(\"./native/build\").then(native => {\n      this.setState({\n        nativeModule: native,\n        currentMessage: \"computing values...\",\n        solver: native.create_solver(2/* expert */),\n      });\n      setImmediate(() => {\n        console.log(\"setting state\");\n        // this takes a really long time\n        this.state.solver?.cache_boards();\n        // this.state.solver?.lock_to_loop(0);\n        const boardHeight = this.state.solver!.get_height();\n        const boardWidth = this.state.solver!.get_width();\n        const newStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n          return {\n            bombPercentage: 0,\n            rupoorPercentage: 0,\n            selectedType: HoleContent.Unspecified,\n            ranking: 100,\n          }\n        });\n        this.setState({\n          currentMessage: \"done!\",\n          boardWidth,\n          boardHeight,\n          cellStates: newStates,\n        });\n        this.updateBoardAndRecalculateProbs(newStates);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.solver?.free();\n  }\n\n  getSolverOrError(): SolverWrapper {\n    if (this.state.solver === null) {\n      throw Error(\"solver is null!\");\n    }\n    return this.state.solver;\n  }\n\n  selectedChanged(index: number, selection: HoleContent) {\n    const cellStates = this.state.cellStates;\n    cellStates[index].selectedType = selection;\n    const solver = this.getSolverOrError();\n    solver.set_hole(index, selection);\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  // calculate the new probabilites and sets the cellStates to the state at the end\n  updateBoardAndRecalculateProbs(cellStates: CellState[]) {\n    const solver = this.getSolverOrError();\n    solver.calculate_probabilities_with_pregenerated();\n    cellStates.forEach((cellState, index) => {\n      cellState.bombPercentage = solver.get_probability(index);\n      // cellState.rupoorPercentage = solver.get_rupoor_probability(index);\n      cellState.rupoorPercentage = solver.get_rupoor_probability(index);\n    });\n    // figure out the best places for the ranking, don't include already placed\n    const cellStatesWithIndex: [number, CellState][] = cellStates\n      .filter(cs => cs.selectedType === HoleContent.Unspecified)\n      .map((CellState, index) => [index, CellState]);\n    // first sort by bomb probability, then by rupoor probability\n    cellStatesWithIndex.sort((a,b) => a[1].bombPercentage - b[1].bombPercentage || a[1].rupoorPercentage - b[1].rupoorPercentage);\n    cellStatesWithIndex.forEach(([_, CellState], index) => CellState.ranking = index);\n    // make all cells, that are already dug up have no ranking\n    cellStates.forEach(cs => {\n      if (cs.selectedType !== HoleContent.Unspecified) {\n        cs.ranking = 100;\n      }\n    });\n    this.setState({\n      cellStates,\n      matchingSeedCount: solver.get_possible_rng_values_count(),\n      possibleLoops: this.getPossibleLoopArray(solver),\n    });\n  }\n\n  getPossibleLoopArray(solver: SolverWrapper): boolean[] {\n    let loop_array = new Uint8Array(9);\n    solver.get_possible_loops(loop_array);\n    let our_arr: boolean[] = [];\n    loop_array.forEach((val, idx) => {\n      our_arr.push(val === 1);\n    });\n    return our_arr;\n  }\n\n  resetPossibleLoopArray() {\n    this.getSolverOrError().reset_possible_loops();\n    this.updateBoardAndRecalculateProbs(this.state.cellStates);\n  }\n\n  setPossibleLoop(idx: number, state: boolean) {\n    this.getSolverOrError().set_possible_loop(idx, state);\n    this.updateBoardAndRecalculateProbs(this.state.cellStates);\n  }\n\n  resetBoard() {\n    const boardHeight = this.state.solver?.get_height() || 0;\n    const boardWidth = this.state.solver?.get_width() || 0;\n    const cellStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n      return {\n        bombPercentage: 0,\n        rupoorPercentage: 0,\n        selectedType: HoleContent.Unspecified,\n        ranking: 100,\n      }\n    });\n    const solver = this.getSolverOrError();\n    for (let i = 0;i < boardHeight * boardWidth;i++) {\n      solver.set_hole(i, HoleContent.Unspecified);\n    }\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  render() {\n    const {boardHeight, boardWidth, cellStates, currentMessage, matchingSeedCount, possibleLoops} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Thrill Digger Expert solver</h1>\n        <div>{currentMessage}</div>\n        <div>matching seeds: {matchingSeedCount}</div>\n        <div>Possible Loops: {possibleLoops.map((val, idx) => {\n          return (<span><input type=\"checkbox\" checked={val} onChange={e => this.setPossibleLoop(idx, e.target.checked)}/>{idx}</span>);\n        })}</div>\n        <div><button onClick={this.resetPossibleLoopArray.bind(this)}>Reset Loops</button></div>\n        <table>\n          <tbody>\n            {\n              Array(boardHeight).fill(0).map((_, y) => {\n                return (<tr>\n                  {\n                    Array(boardWidth).fill(0).map((_, x) => {\n                      const index = y * boardWidth + x;\n                      const cellState = cellStates[index];\n                      return (<td><GridField\n                        key={index}\n                        bombProbability={cellState.bombPercentage}\n                        rupoorProbability={cellState.rupoorPercentage}\n                        selectedState={cellState.selectedType}\n                        index={index}\n                        selectionChangedCallback={this.selectedChanged}\n                        ranking={cellState.ranking}></GridField></td>)\n                    })\n                  }\n                </tr>)\n              })\n            }\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard.bind(this)}>Reset</button>\n        <div>Source code: <a href=\"https://github.com/lepelog/thrill-digger\">GitHub</a></div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <TestComp/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport interpolate from \"color-interpolate\";\nimport \"./GridField.css\";\nimport unspecified from './contents/Unspecified.png'\nimport greenRupee from './contents/GreenRupee.png'\nimport blueRupee from './contents/BlueRupee.png'\nimport redRupee from './contents/RedRupee.png'\nimport silverRupee from './contents/SilverRupee.png'\nimport goldRupee from './contents/GoldRupee.png'\nimport rupoor from './contents/Rupoor.png'\nimport bomb from './contents/Bomb.png'\n\nexport enum HoleContent {\n  Unspecified = 0,\n  GreenRupee = 1,\n  BlueRupee = 2,\n  RedRupee = 3,\n  SilverRupee = 4,\n  GoldRupee = 5,\n  Rupoor = 6,\n  Bomb = 7,\n};\n\nfunction holeContentToStr(hc: HoleContent): string {\n  return HoleContent[hc];\n}\n\ntype GridFieldProps = {\n    bombProbability: number,\n    rupoorProbability: number,\n    selectedState: HoleContent,\n    index: number,\n    selectionChangedCallback: (index: number, newSelected: HoleContent) => void,\n    ranking: number,\n}\n\nconst holeStates = [\n  HoleContent.Unspecified,\n  HoleContent.GreenRupee,\n  HoleContent.BlueRupee,\n  HoleContent.RedRupee,\n  HoleContent.SilverRupee,\n  HoleContent.GoldRupee,\n  HoleContent.Rupoor,\n  HoleContent.Bomb,\n];\n\nconst goodnessInterpolation = interpolate(['#2de500', '#e5d200', '#e50b00']);\n\nexport class GridField extends React.Component<GridFieldProps, {}> {\n    contentImages: string[];\n\n    constructor(props: GridFieldProps) {\n        super(props);\n        this.contentImages = [\n          unspecified,\n          greenRupee,\n          blueRupee,\n          redRupee,\n          silverRupee,\n          goldRupee,\n          rupoor,\n          bomb\n        ];\n    }\n\n    onSelectChange(newSelection: number) {\n        this.props.selectionChangedCallback(this.props.index, newSelection);\n    }\n\n    render() {\n      const {bombProbability, rupoorProbability, selectedState, ranking} = this.props;\n      const bgColor = selectedState === HoleContent.Unspecified ? goodnessInterpolation(isFinite(bombProbability) ? bombProbability : 0) : \"unset\";\n      return (\n        <div className=\"grid-field\" style={{backgroundColor: bgColor, borderColor: ranking < 3 ? \"#0011d3\": \"black\"}}>\n          <div>bomb probability: {(bombProbability * 100).toFixed(2)}%</div>\n          <div>rupoor probability: {(rupoorProbability * 100).toFixed(2)}%</div>\n          <div>\n              {holeStates.map((h, index) => {\n                  return (\n                    <img key={index} className={(index === selectedState ? \"content-image-highlighted \" : \"\") + \"content-image\"} src={this.contentImages[index]} alt={holeContentToStr(h)} onClick={this.onSelectChange.bind(this, index)} width={20} />\n                  );\n              })}\n          </div>\n        </div>\n      );\n    }\n}","export default __webpack_public_path__ + \"static/media/Unspecified.2b9ce60f.png\";","export default __webpack_public_path__ + \"static/media/GreenRupee.7b5504b7.png\";","export default __webpack_public_path__ + \"static/media/BlueRupee.5b70e0f7.png\";","export default __webpack_public_path__ + \"static/media/RedRupee.863b0080.png\";","export default __webpack_public_path__ + \"static/media/SilverRupee.a1abe29d.png\";","export default __webpack_public_path__ + \"static/media/GoldRupee.8fb25791.png\";","export default __webpack_public_path__ + \"static/media/Rupoor.2f12451b.png\";","export default __webpack_public_path__ + \"static/media/Bomb.3dc15ccf.png\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}