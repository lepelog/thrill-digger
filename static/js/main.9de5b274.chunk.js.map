{"version":3,"sources":["App.tsx","GridField.tsx","contents/Unspecified.png","contents/GreenRupee.png","contents/BlueRupee.png","contents/RedRupee.png","contents/SilverRupee.png","contents/GoldRupee.png","contents/Rupoor.png","contents/Bomb.png","reportWebVitals.ts","index.tsx"],"names":["TestComp","props","state","nativeModule","currentMessage","solver","cellStates","bombPercentage","rupoorPercentage","selectedType","HoleContent","Unspecified","ranking","boardHeight","boardWidth","identifiedLoop","undefined","matchingSeedCount","selectedChanged","bind","then","native","setState","create_solver","setImmediate","console","log","cache_boards","get_height","get_width","newStates","Array","fill","map","updateBoardAndRecalculateProbs","this","free","Error","index","selection","getSolverOrError","set_hole","calculate_probabilities_with_pregenerated","forEach","cellState","get_probability","get_rupoor_probability","cellStatesWithIndex","filter","cs","CellState","sort","a","b","get_possible_rng_values_count","get_identified_loop","i","className","_","y","x","bombProbability","rupoorProbability","selectedState","selectionChangedCallback","onClick","resetBoard","href","React","Component","App","holeStates","GreenRupee","BlueRupee","RedRupee","SilverRupee","GoldRupee","Rupoor","Bomb","goodnessInterpolation","interpolate","GridField","contentImages","unspecified","greenRupee","blueRupee","redRupee","silverRupee","goldRupee","rupoor","bomb","newSelection","bgColor","isFinite","style","backgroundColor","borderColor","toFixed","h","src","alt","hc","onSelectChange","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9de5b274.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SolverWrapper } from \"./native/build\";\nimport { GridField, HoleContent } from \"./GridField\";\n\ntype CellState = {\n  bombPercentage: number,\n  rupoorPercentage: number,\n  selectedType: HoleContent,\n  ranking: number,\n};\n\ntype AppState = {\n  nativeModule: any,\n  currentMessage: string,\n  solver: SolverWrapper | null,\n  cellStates: CellState[],\n  boardWidth: number,\n  boardHeight: number,\n  identifiedLoop: number | undefined,\n  matchingSeedCount: number,\n};\n\nclass TestComp extends React.Component<{}, AppState> {\n  constructor(props: AppState) {\n    super(props);\n\n    this.state = {\n      nativeModule: null,\n      currentMessage: \"waiting to initialize...\",\n      solver: null,\n      cellStates: [{bombPercentage: 0, rupoorPercentage: 0, selectedType: HoleContent.Unspecified, ranking: 100}],\n      boardHeight: 0,\n      boardWidth: 0,\n      identifiedLoop: undefined,\n      matchingSeedCount: -1,\n    };\n\n    this.selectedChanged = this.selectedChanged.bind(this);\n  }\n\n  componentDidMount() {\n    import(\"./native/build\").then(native => {\n      this.setState({\n        nativeModule: native,\n        currentMessage: \"computing values...\",\n        solver: native.create_solver(2/* expert */),\n      });\n      setImmediate(() => {\n        console.log(\"setting state\");\n        // this takes a really long time\n        this.state.solver?.cache_boards();\n        // this.state.solver?.lock_to_loop(0);\n        const boardHeight = this.state.solver!.get_height();\n        const boardWidth = this.state.solver!.get_width();\n        const newStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n          return {\n            bombPercentage: 0,\n            rupoorPercentage: 0,\n            selectedType: HoleContent.Unspecified,\n            ranking: 100,\n          }\n        });\n        this.setState({\n          currentMessage: \"done!\",\n          boardWidth,\n          boardHeight,\n          cellStates: newStates,\n        });\n        this.updateBoardAndRecalculateProbs(newStates);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.solver?.free();\n  }\n\n  getSolverOrError(): SolverWrapper {\n    if (this.state.solver === null) {\n      throw Error(\"solver is null!\");\n    }\n    return this.state.solver;\n  }\n\n  selectedChanged(index: number, selection: HoleContent) {\n    const cellStates = this.state.cellStates;\n    cellStates[index].selectedType = selection;\n    const solver = this.getSolverOrError();\n    solver.set_hole(index, selection);\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  // calculate the new probabilites and sets the cellStates to the state at the end\n  updateBoardAndRecalculateProbs(cellStates: CellState[]) {\n    const solver = this.getSolverOrError();\n    solver.calculate_probabilities_with_pregenerated();\n    cellStates.forEach((cellState, index) => {\n      cellState.bombPercentage = solver.get_probability(index);\n      // cellState.rupoorPercentage = solver.get_rupoor_probability(index);\n      cellState.rupoorPercentage = solver.get_rupoor_probability(index);\n    });\n    // figure out the best places for the ranking, don't include already placed\n    const cellStatesWithIndex: [number, CellState][] = cellStates\n      .filter(cs => cs.selectedType === HoleContent.Unspecified)\n      .map((CellState, index) => [index, CellState]);\n    // first sort by bomb probability, then by rupoor probability\n    cellStatesWithIndex.sort((a,b) => a[1].bombPercentage - b[1].bombPercentage || a[1].rupoorPercentage - b[1].rupoorPercentage);\n    cellStatesWithIndex.forEach(([_, CellState], index) => CellState.ranking = index);\n    // make all cells, that are already dug up have no ranking\n    cellStates.forEach(cs => {\n      if (cs.selectedType !== HoleContent.Unspecified) {\n        cs.ranking = 100;\n      }\n    });\n    this.setState({\n      cellStates,\n      matchingSeedCount: solver.get_possible_rng_values_count(),\n      identifiedLoop: solver.get_identified_loop(),\n    });\n  }\n\n  resetBoard() {\n    const boardHeight = this.state.solver?.get_height() || 0;\n    const boardWidth = this.state.solver?.get_width() || 0;\n    const cellStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n      return {\n        bombPercentage: 0,\n        rupoorPercentage: 0,\n        selectedType: HoleContent.Unspecified,\n        ranking: 100,\n      }\n    });\n    const solver = this.getSolverOrError();\n    for (let i = 0;i < boardHeight * boardWidth;i++) {\n      solver.set_hole(i, HoleContent.Unspecified);\n    }\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  render() {\n    const {boardHeight, boardWidth, cellStates, currentMessage, matchingSeedCount, identifiedLoop} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Thrill Digger Expert solver</h1>\n        <div>{currentMessage}</div>\n        <div>matching seeds: {matchingSeedCount}</div>\n        <div>identified loop: {identifiedLoop}</div>\n        <table>\n          <tbody>\n            {\n              Array(boardHeight).fill(0).map((_, y) => {\n                return (<tr>\n                  {\n                    Array(boardWidth).fill(0).map((_, x) => {\n                      const index = y * boardWidth + x;\n                      const cellState = cellStates[index];\n                      return (<td><GridField\n                        key={index}\n                        bombProbability={cellState.bombPercentage}\n                        rupoorProbability={cellState.rupoorPercentage}\n                        selectedState={cellState.selectedType}\n                        index={index}\n                        selectionChangedCallback={this.selectedChanged}\n                        ranking={cellState.ranking}></GridField></td>)\n                    })\n                  }\n                </tr>)\n              })\n            }\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard.bind(this)}>Reset</button>\n        <div>Source code: <a href=\"https://github.com/lepelog/thrill-digger\">GitHub</a></div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <TestComp/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport interpolate from \"color-interpolate\";\nimport \"./GridField.css\";\nimport unspecified from './contents/Unspecified.png'\nimport greenRupee from './contents/GreenRupee.png'\nimport blueRupee from './contents/BlueRupee.png'\nimport redRupee from './contents/RedRupee.png'\nimport silverRupee from './contents/SilverRupee.png'\nimport goldRupee from './contents/GoldRupee.png'\nimport rupoor from './contents/Rupoor.png'\nimport bomb from './contents/Bomb.png'\n\nexport enum HoleContent {\n  Unspecified = 0,\n  GreenRupee = 1,\n  BlueRupee = 2,\n  RedRupee = 3,\n  SilverRupee = 4,\n  GoldRupee = 5,\n  Rupoor = 6,\n  Bomb = 7,\n};\n\nfunction holeContentToStr(hc: HoleContent): string {\n  return HoleContent[hc];\n}\n\ntype GridFieldProps = {\n    bombProbability: number,\n    rupoorProbability: number,\n    selectedState: HoleContent,\n    index: number,\n    selectionChangedCallback: (index: number, newSelected: HoleContent) => void,\n    ranking: number,\n}\n\nconst holeStates = [\n  HoleContent.Unspecified,\n  HoleContent.GreenRupee,\n  HoleContent.BlueRupee,\n  HoleContent.RedRupee,\n  HoleContent.SilverRupee,\n  HoleContent.GoldRupee,\n  HoleContent.Rupoor,\n  HoleContent.Bomb,\n];\n\nconst goodnessInterpolation = interpolate(['#2de500', '#e5d200', '#e50b00']);\n\nexport class GridField extends React.Component<GridFieldProps, {}> {\n    contentImages: string[];\n\n    constructor(props: GridFieldProps) {\n        super(props);\n        this.contentImages = [\n          unspecified,\n          greenRupee,\n          blueRupee,\n          redRupee,\n          silverRupee,\n          goldRupee,\n          rupoor,\n          bomb\n        ];\n    }\n\n    onSelectChange(newSelection: number) {\n        this.props.selectionChangedCallback(this.props.index, newSelection);\n    }\n\n    render() {\n      const {bombProbability, rupoorProbability, selectedState, ranking} = this.props;\n      const bgColor = selectedState === HoleContent.Unspecified ? goodnessInterpolation(isFinite(bombProbability) ? bombProbability : 0) : \"unset\";\n      return (\n        <div className=\"grid-field\" style={{backgroundColor: bgColor, borderColor: ranking < 3 ? \"#0011d3\": \"black\"}}>\n          <div>bomb probability: {(bombProbability * 100).toFixed(2)}%</div>\n          <div>rupoor probability: {(rupoorProbability * 100).toFixed(2)}%</div>\n          <div>\n              {holeStates.map((h, index) => {\n                  return (\n                    <img key={index} className={(index === selectedState ? \"content-image-highlighted \" : \"\") + \"content-image\"} src={this.contentImages[index]} alt={holeContentToStr(h)} onClick={this.onSelectChange.bind(this, index)} width={20} />\n                  );\n              })}\n          </div>\n        </div>\n      );\n    }\n}","export default __webpack_public_path__ + \"static/media/Unspecified.2b9ce60f.png\";","export default __webpack_public_path__ + \"static/media/GreenRupee.7b5504b7.png\";","export default __webpack_public_path__ + \"static/media/BlueRupee.5b70e0f7.png\";","export default __webpack_public_path__ + \"static/media/RedRupee.863b0080.png\";","export default __webpack_public_path__ + \"static/media/SilverRupee.a1abe29d.png\";","export default __webpack_public_path__ + \"static/media/GoldRupee.8fb25791.png\";","export default __webpack_public_path__ + \"static/media/Rupoor.2f12451b.png\";","export default __webpack_public_path__ + \"static/media/Bomb.3dc15ccf.png\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}