{"version":3,"sources":["GridField.tsx","contents/Unspecified.webp","contents/GreenRupee.webp","contents/BlueRupee.webp","contents/RedRupee.webp","contents/SilverRupee.webp","contents/GoldRupee.webp","contents/Rupoor.webp","contents/Bomb.webp","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HoleContent","holeStates","Unspecified","GreenRupee","BlueRupee","RedRupee","SilverRupee","GoldRupee","Rupoor","Bomb","SAFEST_COLOR","ALMOST_SAFEST_COLOR","firstTierInterpolation","interpolate","secondTierInterpolation","GridField","props","contentImages","unspecified","greenRupee","blueRupee","redRupee","silverRupee","goldRupee","rupoor","bomb","newSelection","this","selectionChangedCallback","index","rank","bombProbability","rupoorProbability","isFinite","probabilities","selectedState","ranking","bgColor","getBgColor","className","style","backgroundColor","toFixed","map","h","src","alt","hc","onClick","onSelectChange","bind","width","React","Component","TestComp","state","nativeModule","currentMessage","solver","cellStates","Array","fill","selectedType","boardHeight","boardWidth","possibleLoops","matchingSeedCount","selectedChanged","then","native","setState","create_solver","setImmediate","console","log","cache_boards","get_height","get_width","newStates","updateBoardAndRecalculateProbs","free","Error","selection","getSolverOrError","set_hole","calculate_probabilities_with_pregenerated","forEach","cellState","_","i","get_a_probability","cellStatesWithIndex","filter","cs","CellState","sort","a","b","get_possible_rng_values_count","getPossibleLoopArray","loop_array","Uint8Array","get_possible_loops","our_arr","val","idx","push","reset_possible_loops","set_possible_loop","type","checked","onChange","e","setPossibleLoop","target","resetPossibleLoopArray","y","x","resetBoard","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d5645bc.chunk.js","sourcesContent":["import React from 'react';\nimport interpolate from \"color-interpolate\";\nimport \"./GridField.css\";\nimport unspecified from './contents/Unspecified.webp'\nimport greenRupee from './contents/GreenRupee.webp'\nimport blueRupee from './contents/BlueRupee.webp'\nimport redRupee from './contents/RedRupee.webp'\nimport silverRupee from './contents/SilverRupee.webp'\nimport goldRupee from './contents/GoldRupee.webp'\nimport rupoor from './contents/Rupoor.webp'\nimport bomb from './contents/Bomb.webp'\n\nexport enum HoleContent {\n  Unspecified = 0,\n  GreenRupee = 1,\n  BlueRupee = 2,\n  RedRupee = 3,\n  SilverRupee = 4,\n  GoldRupee = 5,\n  Rupoor = 6,\n  Bomb = 7,\n};\n\nfunction holeContentToStr(hc: HoleContent): string {\n  return HoleContent[hc];\n}\n\ntype GridFieldProps = {\n    probabilities: number[],\n    selectedState: HoleContent,\n    index: number,\n    selectionChangedCallback: (index: number, newSelected: HoleContent) => void,\n    ranking: number,\n}\n\nconst holeStates = [\n  HoleContent.Unspecified,\n  HoleContent.GreenRupee,\n  HoleContent.BlueRupee,\n  HoleContent.RedRupee,\n  HoleContent.SilverRupee,\n  HoleContent.GoldRupee,\n  HoleContent.Rupoor,\n  HoleContent.Bomb,\n];\n\nconst SAFEST_COLOR = '#53fc05';\nconst ALMOST_SAFEST_COLOR = '#349b04';\n\nconst firstTierInterpolation = interpolate([SAFEST_COLOR, ALMOST_SAFEST_COLOR]);\nconst secondTierInterpolation = interpolate(['#fcf80c', '#a30800']);\n\nexport class GridField extends React.Component<GridFieldProps, {}> {\n    contentImages: string[];\n\n    constructor(props: GridFieldProps) {\n        super(props);\n        this.contentImages = [\n          unspecified,\n          greenRupee,\n          blueRupee,\n          redRupee,\n          silverRupee,\n          goldRupee,\n          rupoor,\n          bomb\n        ];\n    }\n\n    onSelectChange(newSelection: number) {\n        this.props.selectionChangedCallback(this.props.index, newSelection);\n    }\n\n    getBgColor(rank: number, bombProbability: number, rupoorProbability: number): string {\n      if (!isFinite(bombProbability)) {\n        return \"unset\";\n      }\n      if (bombProbability === 0) {\n        if (rupoorProbability === 0) {\n          return SAFEST_COLOR;\n        } else {\n          return ALMOST_SAFEST_COLOR;\n        }\n      }\n      const GOOD_RANK_COUNT = 4;\n      if (rank < GOOD_RANK_COUNT) {\n        return firstTierInterpolation(rank / GOOD_RANK_COUNT);\n      } else {\n        return secondTierInterpolation(bombProbability);\n      }\n    }\n\n    render() {\n      const {probabilities, selectedState, ranking} = this.props;\n      const bombProbability = probabilities[HoleContent.Bomb];\n      const rupoorProbability = probabilities[HoleContent.Rupoor];\n      const bgColor = selectedState === HoleContent.Unspecified ? this.getBgColor(ranking, bombProbability, rupoorProbability) : \"unset\";\n      return (\n        <div className=\"grid-field\" style={{backgroundColor: bgColor}}>\n          <div>bomb probability: {(bombProbability * 100).toFixed(2)}%</div>\n          <div>rupoor probability: {(rupoorProbability * 100).toFixed(2)}%</div>\n          <div>\n              {holeStates.map((h, index) => {\n                if (probabilities[index] == 0) {\n                  return null;\n                } else {\n                  return (\n                    <img key={index} className={(index === selectedState ? \"content-image-highlighted \" : \"\") + \"content-image\"} src={this.contentImages[index]} alt={holeContentToStr(h)} onClick={this.onSelectChange.bind(this, index)} width={20} />\n                  );\n                }\n              })}\n          </div>\n        </div>\n      );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/Unspecified.87384eb5.webp\";","export default __webpack_public_path__ + \"static/media/GreenRupee.e3b197ea.webp\";","export default __webpack_public_path__ + \"static/media/BlueRupee.d3692eb5.webp\";","export default __webpack_public_path__ + \"static/media/RedRupee.9cccfd9f.webp\";","export default __webpack_public_path__ + \"static/media/SilverRupee.26703e7c.webp\";","export default __webpack_public_path__ + \"static/media/GoldRupee.05b47142.webp\";","export default __webpack_public_path__ + \"static/media/Rupoor.2126f62f.webp\";","export default __webpack_public_path__ + \"static/media/Bomb.a989e581.webp\";","import React from 'react';\nimport './App.css';\nimport { SolverWrapper } from \"./native/build\";\nimport { GridField, HoleContent } from \"./GridField\";\n\ntype CellState = {\n  // indexed by HoleContent\n  probabilities: number[]\n  selectedType: HoleContent,\n  ranking: number,\n};\n\ntype AppState = {\n  nativeModule: any,\n  currentMessage: string,\n  solver: SolverWrapper | null,\n  cellStates: CellState[],\n  boardWidth: number,\n  boardHeight: number,\n  possibleLoops: boolean[],\n  matchingSeedCount: number,\n};\n\nclass TestComp extends React.Component<{}, AppState> {\n  constructor(props: AppState) {\n    super(props);\n\n    this.state = {\n      nativeModule: null,\n      currentMessage: \"waiting to initialize...\",\n      solver: null,\n      cellStates: [{probabilities: new Array(8).fill(0), selectedType: HoleContent.Unspecified, ranking: 100}],\n      boardHeight: 0,\n      boardWidth: 0,\n      possibleLoops: [],\n      matchingSeedCount: -1,\n    };\n\n    this.selectedChanged = this.selectedChanged.bind(this);\n  }\n\n  componentDidMount() {\n    import(\"./native/build\").then(native => {\n      this.setState({\n        nativeModule: native,\n        currentMessage: \"computing values...\",\n        solver: native.create_solver(),\n      });\n      setImmediate(() => {\n        console.log(\"setting state\");\n        // this takes a really long time\n        this.state.solver?.cache_boards();\n        // this.state.solver?.lock_to_loop(0);\n        const boardHeight = this.state.solver!.get_height();\n        const boardWidth = this.state.solver!.get_width();\n        const newStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n          return {\n            probabilities: new Array(8).fill(0),\n            selectedType: HoleContent.Unspecified,\n            ranking: 100,\n          }\n        });\n        this.setState({\n          currentMessage: \"done!\",\n          boardWidth,\n          boardHeight,\n          cellStates: newStates,\n        });\n        this.updateBoardAndRecalculateProbs(newStates);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.solver?.free();\n  }\n\n  getSolverOrError(): SolverWrapper {\n    if (this.state.solver === null) {\n      throw Error(\"solver is null!\");\n    }\n    return this.state.solver;\n  }\n\n  selectedChanged(index: number, selection: HoleContent) {\n    const cellStates = this.state.cellStates;\n    if (cellStates[index].selectedType == selection) {\n      selection = HoleContent.Unspecified;\n    }\n    cellStates[index].selectedType = selection;\n    const solver = this.getSolverOrError();\n    solver.set_hole(index, selection);\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  // calculate the new probabilites and sets the cellStates to the state at the end\n  updateBoardAndRecalculateProbs(cellStates: CellState[]) {\n    const solver = this.getSolverOrError();\n    solver.calculate_probabilities_with_pregenerated();\n    cellStates.forEach((cellState, index) => {\n      cellState.probabilities.forEach((_, i) => {\n        cellState.probabilities[i] = solver.get_a_probability(index, i);\n      });\n    });\n    // figure out the best places for the ranking, don't include already placed\n    const cellStatesWithIndex: [number, CellState][] = cellStates\n      .filter(cs => cs.selectedType === HoleContent.Unspecified)\n      .map((CellState, index) => [index, CellState]);\n    // first sort by bomb probability, then by rupoor probability\n    cellStatesWithIndex.sort((a,b) => a[1].probabilities[HoleContent.Bomb] - b[1].probabilities[HoleContent.Bomb] || a[1].probabilities[HoleContent.Rupoor] - b[1].probabilities[HoleContent.Rupoor]);\n    cellStatesWithIndex.forEach(([_, CellState], index) => CellState.ranking = index);\n    // make all cells, that are already dug up have no ranking\n    cellStates.forEach(cs => {\n      if (cs.selectedType !== HoleContent.Unspecified) {\n        cs.ranking = 100;\n      }\n    });\n    this.setState({\n      cellStates,\n      matchingSeedCount: solver.get_possible_rng_values_count(),\n      possibleLoops: this.getPossibleLoopArray(solver),\n    });\n  }\n\n  getPossibleLoopArray(solver: SolverWrapper): boolean[] {\n    let loop_array = new Uint8Array(9);\n    solver.get_possible_loops(loop_array);\n    let our_arr: boolean[] = [];\n    loop_array.forEach((val, idx) => {\n      our_arr.push(val === 1);\n    });\n    return our_arr;\n  }\n\n  resetPossibleLoopArray() {\n    this.getSolverOrError().reset_possible_loops();\n    this.updateBoardAndRecalculateProbs(this.state.cellStates);\n  }\n\n  setPossibleLoop(idx: number, state: boolean) {\n    this.getSolverOrError().set_possible_loop(idx, state);\n    this.updateBoardAndRecalculateProbs(this.state.cellStates);\n  }\n\n  resetBoard() {\n    const boardHeight = this.state.solver?.get_height() || 0;\n    const boardWidth = this.state.solver?.get_width() || 0;\n    const cellStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n      return {\n        probabilities: new Array(8).fill(0),\n        selectedType: HoleContent.Unspecified,\n        ranking: 100,\n      }\n    });\n    const solver = this.getSolverOrError();\n    for (let i = 0;i < boardHeight * boardWidth;i++) {\n      solver.set_hole(i, HoleContent.Unspecified);\n    }\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  render() {\n    const {boardHeight, boardWidth, cellStates, currentMessage, matchingSeedCount, possibleLoops} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Thrill Digger Expert solver</h1>\n        <div>{currentMessage}</div>\n        <div>matching seeds: {matchingSeedCount}</div>\n        <div>Possible Loops: {possibleLoops.map((val, idx) => {\n          return (<span><input type=\"checkbox\" checked={val} onChange={e => this.setPossibleLoop(idx, e.target.checked)}/>{idx}</span>);\n        })}</div>\n        <div><button onClick={this.resetPossibleLoopArray.bind(this)}>Reset Loops</button></div>\n        <table>\n          <tbody>\n            {\n              Array(boardHeight).fill(0).map((_, y) => {\n                return (<tr>\n                  {\n                    Array(boardWidth).fill(0).map((_, x) => {\n                      const index = y * boardWidth + x;\n                      const cellState = cellStates[index];\n                      return (<td><GridField\n                        key={index}\n                        probabilities={cellState.probabilities}\n                        selectedState={cellState.selectedType}\n                        index={index}\n                        selectionChangedCallback={this.selectedChanged}\n                        ranking={cellState.ranking}></GridField></td>)\n                    })\n                  }\n                </tr>)\n              })\n            }\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard.bind(this)}>Reset</button>\n        <div>Source code: <a href=\"https://github.com/lepelog/thrill-digger\">GitHub</a></div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <TestComp/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}